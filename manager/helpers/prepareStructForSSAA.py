import setTpTw

def prepareStructForSSAA(rawData, concVec, realStepTime, tpValue, twVector, technique):
    """
    % This funtion prepares raw data from 1 ms measurement for further
    % processing by standardAddition()
    % rawData - is data from measurement (nrofpoints x nrofmeasurements)
    % concVect - is vector containing the concentration of analyte of each
    %            column of rawData
    % tptotal - is total number of samples per measurement point (usually
    %           tp+tw)
    % tpVal - value of tp to be used for callibration (usually low 1-5)
    % twVect - vector of values of tw's to prepare the final calibration set
    %          (eg. [ 5 10 15 20] - provides 4 sets for calibration)
    % technique - voltammetric technique: 'sc' | 'np' | 'dp' | 'sqw'
    """
    class dataStruct:
        X = []
        Y = []
        CONC = []
        SENS = []

    assert(len(concVec) == len(rawData) )
    pos=1;

    data = dataStruct()
    for i,dataColumn in enumerate(rawData):
        for itw,twValue in enumerate(twVector):
            data.Y.append([])
            data.CONC.append([])
            data.SENS.append([])
            data.Y[-1] , e, ee  = setTpTw.setTpTw(dataColumn, realStepTime, tpValue, twValue, technique)
            data.CONC[-1] = concVec[i]
            data.SENS[-1] = itw

    return data

def importForSSAA():
    data = [
            [-133.117676,-81.481934,-55.908203,-41.015625,-31.860352,-25.512695,-21.118164,-17.883301,-15.441895,-13.732910,-12.207031,-11.047363,-10.253906,-9.338379,-8.728027,-8.239746,-7.690430,-7.324219,-6.958008,-6.652832,136.962891,81.481934,54.077148,38.269043,28.381348,21.911621,17.395020,14.099121,11.596680,9.765625,8.178711,7.141113,6.164551,5.310059,4.577637,4.089355,3.601074,3.234863,2.868652,2.502441,-132.507324,-81.176758,-55.480957,-40.954590,-31.616211,-25.390625,-21.057129,-17.822266,-15.441895,-13.549805,-12.268066,-11.047363,-10.131836,-9.277344,-8.728027,-8.056641,-7.812500,-7.324219,-6.896973,-6.591797,136.474609,81.054688,53.649902,37.963867,28.381348,21.667480,17.272949,14.099121,11.535645,9.704590,8.239746,7.019043,6.042480,5.371094,4.638672,4.150391,3.601074,3.234863,2.807617,2.502441,-132.080078,-80.749512,-55.358887,-40.710449,-31.433105,-25.329590,-20.935059,-17.700195,-15.441895,-13.610840,-12.145996,-10.925293,-10.070801,-9.399414,-8.605957,-8.178711,-7.812500,-7.263184,-6.958008,-6.469727,136.108398,80.871582,53.405762,37.902832,28.076172,21.606445,17.150879,13.977051,11.352539,9.582520,8.239746,6.958008,6.042480,5.310059,4.638672,4.028320,3.540039,3.112793,2.807617,2.380371],
            [-133.117676,-81.481934,-55.908203,-41.015625,-31.860352,-25.512695,-21.118164,-17.883301,-15.441895,-13.732910,-12.207031,-11.047363,-10.253906,-9.338379,-8.728027,-8.239746,-7.690430,-7.324219,-6.958008,-6.652832,136.962891,81.481934,54.077148,38.269043,28.381348,21.911621,17.395020,14.099121,11.596680,9.765625,8.178711,7.141113,6.164551,5.310059,4.577637,4.089355,3.601074,3.234863,2.868652,2.502441,-132.507324,-81.176758,-55.480957,-40.954590,-31.616211,-25.390625,-21.057129,-17.822266,-15.441895,-13.549805,-12.268066,-11.047363,-10.131836,-9.277344,-8.728027,-8.056641,-7.812500,-7.324219,-6.896973,-6.591797,136.474609,81.054688,53.649902,37.963867,28.381348,21.667480,17.272949,14.099121,11.535645,9.704590,8.239746,7.019043,6.042480,5.371094,4.638672,4.150391,3.601074,3.234863,2.807617,2.502441,-132.080078,-80.749512,-55.358887,-40.710449,-31.433105,-25.329590,-20.935059,-17.700195,-15.441895,-13.610840,-12.145996,-10.925293,-10.070801,-9.399414,-8.605957,-8.178711,-7.812500,-7.263184,-6.958008,-6.469727,136.108398,80.871582,53.405762,37.902832,28.076172,21.606445,17.150879,13.977051,11.352539,9.582520,8.239746,6.958008,6.042480,5.310059,4.638672,4.028320,3.540039,3.112793,2.807617,2.380371],
            [-133.117676,-81.481934,-55.908203,-41.015625,-31.860352,-25.512695,-21.118164,-17.883301,-15.441895,-13.732910,-12.207031,-11.047363,-10.253906,-9.338379,-8.728027,-8.239746,-7.690430,-7.324219,-6.958008,-6.652832,136.962891,81.481934,54.077148,38.269043,28.381348,21.911621,17.395020,14.099121,11.596680,9.765625,8.178711,7.141113,6.164551,5.310059,4.577637,4.089355,3.601074,3.234863,2.868652,2.502441,-132.507324,-81.176758,-55.480957,-40.954590,-31.616211,-25.390625,-21.057129,-17.822266,-15.441895,-13.549805,-12.268066,-11.047363,-10.131836,-9.277344,-8.728027,-8.056641,-7.812500,-7.324219,-6.896973,-6.591797,136.474609,81.054688,53.649902,37.963867,28.381348,21.667480,17.272949,14.099121,11.535645,9.704590,8.239746,7.019043,6.042480,5.371094,4.638672,4.150391,3.601074,3.234863,2.807617,2.502441,-132.080078,-80.749512,-55.358887,-40.710449,-31.433105,-25.329590,-20.935059,-17.700195,-15.441895,-13.610840,-12.145996,-10.925293,-10.070801,-9.399414,-8.605957,-8.178711,-7.812500,-7.263184,-6.958008,-6.469727,136.108398,80.871582,53.405762,37.902832,28.076172,21.606445,17.150879,13.977051,11.352539,9.582520,8.239746,6.958008,6.042480,5.310059,4.638672,4.028320,3.540039,3.112793,2.807617,2.380371]
    ]
    strdata = prepareStructForSSAA(data, [ 1, 2, 3 ], 20, 5, [ 0, 5, 10, 15 ], 'dp')
    return strdata


if ( __name__ == '__main__'  ):
    strdata = importForSSAA()
    print(strdata)
    print(strdata.Y)
    print(strdata.CONC)
    print(strdata.SENS)
